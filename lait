#!/usr/bin/env python3
import pygame
from pygame.locals import *
from liblait import scalehandler, Settings, mainmenu, settingsmenu, game
import yaml
import os, sys, time

def initall():
    settings = Settings.SETTINGS(GAMEDIR)
    pygame.display.init()
    pygame.display.set_caption("Lilly's Adventures in Toyland")
    pygame.mixer.init()
    pygame.font.init()
    pygame.joystick.init()
    flags = 0
    if settings.fullscreen:
        flags = pygame.FULLSCREEN|pygame.HWSURFACE
    elif settings.borderless:
        flags = pygame.NOFRAME
    else:
        flags = 0
    screen = pygame.display.set_mode((settings.res_x,settings.res_y),flags)
    return settings,screen,flags    

if __name__ == '__main__':
    GAMEDIR=os.path.dirname(os.path.realpath(__file__))
    settings, screen,flags = initall()
    nextaction = 'mainmenu'
    while nextaction != 'quit':
        if nextaction == 'mainmenu' and 'forcelevel' in sys.argv:
            #This is very undefensive and fragile, but it's a developer only feature so screw it.
            levelfile = sys.argv[sys.argv.index('forcelevel') + 1]
            if 'forcepos' in sys.argv:
                forcepos = sys.argv[sys.argv.index('forcepos') + 1]
                forcepos = tuple([int(i) for i in forcepos.split('x')])
                nextaction = game.Game(settings, screen, flags, levelfile=levelfile).run(forcepos)
            else:
                nextaction = game.Game(settings, screen, flags, levelfile=levelfile).run()
        if nextaction == 'mainmenu':
            nextaction = mainmenu.mainMenu(screen,settings,flags).run()
        if nextaction == 'settings':
            nextaction = settingsmenu.settingsMenu(screen,settings, flags).run()
        if nextaction == 'save_settings':
            settings,screen,flags == initall()
            nextaction = 'mainmenu'
        if nextaction == "continue":
            nextaction = game.Game(settings, screen, flags).run()
        if nextaction == 'new':
            pygame.mixer.music.stop()
            voice = pygame.mixer.Sound(os.path.join(settings.voicedir,'hi.wav'))
            voice.set_volume(settings.voicevol)
            voice.play()
            timer = time.time()
            while time.time() - timer < 7:
                pass
            nextaction = game.Game(settings, screen, flags, levelfile='Level1.yml').run()
    pygame.quit()
    sys.exit()
